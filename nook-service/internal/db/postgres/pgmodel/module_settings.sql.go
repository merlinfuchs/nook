// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: module_settings.sql

package pgmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteModuleSettings = `-- name: DeleteModuleSettings :exec
DELETE FROM module_settings WHERE guild_id = $1 AND module_id = $2
`

type DeleteModuleSettingsParams struct {
	GuildID  int64
	ModuleID string
}

func (q *Queries) DeleteModuleSettings(ctx context.Context, arg DeleteModuleSettingsParams) error {
	_, err := q.db.Exec(ctx, deleteModuleSettings, arg.GuildID, arg.ModuleID)
	return err
}

const getModuleSettings = `-- name: GetModuleSettings :one
SELECT guild_id, module_id, enabled, command_overwrites, config, updated_at FROM module_settings WHERE guild_id = $1 AND module_id = $2
`

type GetModuleSettingsParams struct {
	GuildID  int64
	ModuleID string
}

func (q *Queries) GetModuleSettings(ctx context.Context, arg GetModuleSettingsParams) (ModuleSetting, error) {
	row := q.db.QueryRow(ctx, getModuleSettings, arg.GuildID, arg.ModuleID)
	var i ModuleSetting
	err := row.Scan(
		&i.GuildID,
		&i.ModuleID,
		&i.Enabled,
		&i.CommandOverwrites,
		&i.Config,
		&i.UpdatedAt,
	)
	return i, err
}

const getModuleSettingsByGuildID = `-- name: GetModuleSettingsByGuildID :many
SELECT guild_id, module_id, enabled, command_overwrites, config, updated_at FROM module_settings WHERE guild_id = $1
`

func (q *Queries) GetModuleSettingsByGuildID(ctx context.Context, guildID int64) ([]ModuleSetting, error) {
	rows, err := q.db.Query(ctx, getModuleSettingsByGuildID, guildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ModuleSetting
	for rows.Next() {
		var i ModuleSetting
		if err := rows.Scan(
			&i.GuildID,
			&i.ModuleID,
			&i.Enabled,
			&i.CommandOverwrites,
			&i.Config,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertModuleSettings = `-- name: UpsertModuleSettings :exec
INSERT INTO module_settings (
    guild_id,
    module_id,
    enabled,
    command_overwrites,
    config,
    updated_at
) VALUES ($1, $2, $3, $4, $5, $6) 
ON CONFLICT (guild_id, module_id) DO UPDATE SET 
    enabled = EXCLUDED.enabled,
    command_overwrites = EXCLUDED.command_overwrites,
    config = EXCLUDED.config,
    updated_at = EXCLUDED.updated_at
`

type UpsertModuleSettingsParams struct {
	GuildID           int64
	ModuleID          string
	Enabled           bool
	CommandOverwrites []byte
	Config            []byte
	UpdatedAt         pgtype.Timestamp
}

func (q *Queries) UpsertModuleSettings(ctx context.Context, arg UpsertModuleSettingsParams) error {
	_, err := q.db.Exec(ctx, upsertModuleSettings,
		arg.GuildID,
		arg.ModuleID,
		arg.Enabled,
		arg.CommandOverwrites,
		arg.Config,
		arg.UpdatedAt,
	)
	return err
}
