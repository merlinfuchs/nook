// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: module_value.sql

package pgmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteModuleValue = `-- name: DeleteModuleValue :exec
DELETE FROM module_values WHERE guild_id = $1 AND module_id = $2 AND key = $3
`

type DeleteModuleValueParams struct {
	GuildID  int64
	ModuleID string
	Key      string
}

func (q *Queries) DeleteModuleValue(ctx context.Context, arg DeleteModuleValueParams) error {
	_, err := q.db.Exec(ctx, deleteModuleValue, arg.GuildID, arg.ModuleID, arg.Key)
	return err
}

const getModuleValue = `-- name: GetModuleValue :one
SELECT id, guild_id, module_id, key, value, created_at, updated_at FROM module_values WHERE guild_id = $1 AND module_id = $2 AND key = $3
`

type GetModuleValueParams struct {
	GuildID  int64
	ModuleID string
	Key      string
}

func (q *Queries) GetModuleValue(ctx context.Context, arg GetModuleValueParams) (ModuleValue, error) {
	row := q.db.QueryRow(ctx, getModuleValue, arg.GuildID, arg.ModuleID, arg.Key)
	var i ModuleValue
	err := row.Scan(
		&i.ID,
		&i.GuildID,
		&i.ModuleID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getModuleValueForUpdate = `-- name: GetModuleValueForUpdate :one
SELECT id, guild_id, module_id, key, value, created_at, updated_at FROM module_values WHERE guild_id = $1 AND module_id = $2 AND key = $3 FOR UPDATE
`

type GetModuleValueForUpdateParams struct {
	GuildID  int64
	ModuleID string
	Key      string
}

func (q *Queries) GetModuleValueForUpdate(ctx context.Context, arg GetModuleValueForUpdateParams) (ModuleValue, error) {
	row := q.db.QueryRow(ctx, getModuleValueForUpdate, arg.GuildID, arg.ModuleID, arg.Key)
	var i ModuleValue
	err := row.Scan(
		&i.ID,
		&i.GuildID,
		&i.ModuleID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const setModuleValue = `-- name: SetModuleValue :one
INSERT INTO module_values (
    guild_id,
    module_id,
    key,
    value,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6
) ON CONFLICT (guild_id, module_id, key) DO UPDATE SET
    value = EXCLUDED.value,
    updated_at = EXCLUDED.updated_at
RETURNING id, guild_id, module_id, key, value, created_at, updated_at
`

type SetModuleValueParams struct {
	GuildID   int64
	ModuleID  string
	Key       string
	Value     []byte
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) SetModuleValue(ctx context.Context, arg SetModuleValueParams) (ModuleValue, error) {
	row := q.db.QueryRow(ctx, setModuleValue,
		arg.GuildID,
		arg.ModuleID,
		arg.Key,
		arg.Value,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i ModuleValue
	err := row.Scan(
		&i.ID,
		&i.GuildID,
		&i.ModuleID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
