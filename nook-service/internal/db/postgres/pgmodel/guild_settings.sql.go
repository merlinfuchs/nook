// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: guild_settings.sql

package pgmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteGuildSettings = `-- name: DeleteGuildSettings :exec
DELETE FROM guild_settings WHERE guild_id = $1
`

func (q *Queries) DeleteGuildSettings(ctx context.Context, guildID int64) error {
	_, err := q.db.Exec(ctx, deleteGuildSettings, guildID)
	return err
}

const getAllGuildSettings = `-- name: GetAllGuildSettings :many
SELECT guild_id, command_prefix, color_scheme, updated_at FROM guild_settings
`

func (q *Queries) GetAllGuildSettings(ctx context.Context) ([]GuildSetting, error) {
	rows, err := q.db.Query(ctx, getAllGuildSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GuildSetting
	for rows.Next() {
		var i GuildSetting
		if err := rows.Scan(
			&i.GuildID,
			&i.CommandPrefix,
			&i.ColorScheme,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGuildSettings = `-- name: GetGuildSettings :one
SELECT guild_id, command_prefix, color_scheme, updated_at FROM guild_settings WHERE guild_id = $1
`

func (q *Queries) GetGuildSettings(ctx context.Context, guildID int64) (GuildSetting, error) {
	row := q.db.QueryRow(ctx, getGuildSettings, guildID)
	var i GuildSetting
	err := row.Scan(
		&i.GuildID,
		&i.CommandPrefix,
		&i.ColorScheme,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertGuildSettings = `-- name: UpsertGuildSettings :exec
INSERT INTO guild_settings (
    guild_id,
    command_prefix,
    color_scheme,
    updated_at
) VALUES ($1, $2, $3, $4) 
ON CONFLICT (guild_id) DO UPDATE SET 
    command_prefix = EXCLUDED.command_prefix,
    color_scheme = EXCLUDED.color_scheme,
    updated_at = EXCLUDED.updated_at
`

type UpsertGuildSettingsParams struct {
	GuildID       int64
	CommandPrefix pgtype.Text
	ColorScheme   pgtype.Text
	UpdatedAt     pgtype.Timestamp
}

func (q *Queries) UpsertGuildSettings(ctx context.Context, arg UpsertGuildSettingsParams) error {
	_, err := q.db.Exec(ctx, upsertGuildSettings,
		arg.GuildID,
		arg.CommandPrefix,
		arg.ColorScheme,
		arg.UpdatedAt,
	)
	return err
}
