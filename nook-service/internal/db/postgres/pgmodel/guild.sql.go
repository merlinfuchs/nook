// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: guild.sql

package pgmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getGuild = `-- name: GetGuild :one
SELECT id, name, description, icon, unavailable, deleted, owner_user_id, created_at, updated_at FROM guilds WHERE id = $1
`

func (q *Queries) GetGuild(ctx context.Context, id int64) (Guild, error) {
	row := q.db.QueryRow(ctx, getGuild, id)
	var i Guild
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Icon,
		&i.Unavailable,
		&i.Deleted,
		&i.OwnerUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGuildsByOwnerUserID = `-- name: GetGuildsByOwnerUserID :many
SELECT id, name, description, icon, unavailable, deleted, owner_user_id, created_at, updated_at FROM guilds WHERE owner_user_id = $1
`

func (q *Queries) GetGuildsByOwnerUserID(ctx context.Context, ownerUserID int64) ([]Guild, error) {
	rows, err := q.db.Query(ctx, getGuildsByOwnerUserID, ownerUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Guild
	for rows.Next() {
		var i Guild
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Icon,
			&i.Unavailable,
			&i.Deleted,
			&i.OwnerUserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGuildDeleted = `-- name: UpdateGuildDeleted :exec
UPDATE guilds SET deleted = $2 WHERE id = $1
`

type UpdateGuildDeletedParams struct {
	ID      int64
	Deleted bool
}

func (q *Queries) UpdateGuildDeleted(ctx context.Context, arg UpdateGuildDeletedParams) error {
	_, err := q.db.Exec(ctx, updateGuildDeleted, arg.ID, arg.Deleted)
	return err
}

const updateGuildUnavailable = `-- name: UpdateGuildUnavailable :exec
UPDATE guilds SET unavailable = $2 WHERE id = $1
`

type UpdateGuildUnavailableParams struct {
	ID          int64
	Unavailable bool
}

func (q *Queries) UpdateGuildUnavailable(ctx context.Context, arg UpdateGuildUnavailableParams) error {
	_, err := q.db.Exec(ctx, updateGuildUnavailable, arg.ID, arg.Unavailable)
	return err
}

const upsertGuild = `-- name: UpsertGuild :one
INSERT INTO guilds (
    id, 
    name,
    description, 
    icon,
    unavailable,
    owner_user_id, 
    created_at, 
    updated_at
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
ON CONFLICT (id) DO UPDATE SET 
    name = EXCLUDED.name,
    description = EXCLUDED.description,
    icon = EXCLUDED.icon,
    unavailable = EXCLUDED.unavailable,
    owner_user_id = EXCLUDED.owner_user_id,
    updated_at = EXCLUDED.updated_at
RETURNING id, name, description, icon, unavailable, deleted, owner_user_id, created_at, updated_at
`

type UpsertGuildParams struct {
	ID          int64
	Name        string
	Description pgtype.Text
	Icon        pgtype.Text
	Unavailable bool
	OwnerUserID int64
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

func (q *Queries) UpsertGuild(ctx context.Context, arg UpsertGuildParams) (Guild, error) {
	row := q.db.QueryRow(ctx, upsertGuild,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Icon,
		arg.Unavailable,
		arg.OwnerUserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Guild
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Icon,
		&i.Unavailable,
		&i.Deleted,
		&i.OwnerUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
