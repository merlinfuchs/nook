// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: session.sql

package pgmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions (
    key_hash, 
    user_id, 
    token_access,
    token_refresh, 
    token_scopes, 
    token_expires_at, 
    guilds,
    created_at,
    expires_at
) VALUES (
    $1, 
    $2, 
    $3, 
    $4, 
    $5, 
    $6, 
    $7, 
    $8, 
    $9
)
`

type CreateSessionParams struct {
	KeyHash        string
	UserID         int64
	TokenAccess    string
	TokenRefresh   string
	TokenScopes    []string
	TokenExpiresAt pgtype.Timestamp
	Guilds         []byte
	CreatedAt      pgtype.Timestamp
	ExpiresAt      pgtype.Timestamp
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.Exec(ctx, createSession,
		arg.KeyHash,
		arg.UserID,
		arg.TokenAccess,
		arg.TokenRefresh,
		arg.TokenScopes,
		arg.TokenExpiresAt,
		arg.Guilds,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE key_hash = $1
`

func (q *Queries) DeleteSession(ctx context.Context, keyHash string) error {
	_, err := q.db.Exec(ctx, deleteSession, keyHash)
	return err
}

const getSession = `-- name: GetSession :one
SELECT key_hash, user_id, token_access, token_refresh, token_scopes, token_expires_at, guilds, created_at, expires_at FROM sessions WHERE key_hash = $1
`

func (q *Queries) GetSession(ctx context.Context, keyHash string) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, keyHash)
	var i Session
	err := row.Scan(
		&i.KeyHash,
		&i.UserID,
		&i.TokenAccess,
		&i.TokenRefresh,
		&i.TokenScopes,
		&i.TokenExpiresAt,
		&i.Guilds,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
