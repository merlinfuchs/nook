// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: entitlement.sql

package pgmodel

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getActiveEntitlementsByGuildID = `-- name: GetActiveEntitlementsByGuildID :many
SELECT id, guild_id, subscription_id, type, plan_ids, starts_at, ends_at, created_at, updated_at FROM entitlements 
WHERE guild_id = $1 
AND (starts_at IS NULL OR starts_at <= $2) 
AND (ends_at IS NULL OR ends_at > $2)
`

type GetActiveEntitlementsByGuildIDParams struct {
	GuildID  int64
	StartsAt pgtype.Timestamp
}

func (q *Queries) GetActiveEntitlementsByGuildID(ctx context.Context, arg GetActiveEntitlementsByGuildIDParams) ([]Entitlement, error) {
	rows, err := q.db.Query(ctx, getActiveEntitlementsByGuildID, arg.GuildID, arg.StartsAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entitlement
	for rows.Next() {
		var i Entitlement
		if err := rows.Scan(
			&i.ID,
			&i.GuildID,
			&i.SubscriptionID,
			&i.Type,
			&i.PlanIds,
			&i.StartsAt,
			&i.EndsAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntitlementsByGuildID = `-- name: GetEntitlementsByGuildID :many
SELECT id, guild_id, subscription_id, type, plan_ids, starts_at, ends_at, created_at, updated_at FROM entitlements WHERE guild_id = $1
`

func (q *Queries) GetEntitlementsByGuildID(ctx context.Context, guildID int64) ([]Entitlement, error) {
	rows, err := q.db.Query(ctx, getEntitlementsByGuildID, guildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entitlement
	for rows.Next() {
		var i Entitlement
		if err := rows.Scan(
			&i.ID,
			&i.GuildID,
			&i.SubscriptionID,
			&i.Type,
			&i.PlanIds,
			&i.StartsAt,
			&i.EndsAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntitlementsBySubscriptionID = `-- name: GetEntitlementsBySubscriptionID :many
SELECT id, guild_id, subscription_id, type, plan_ids, starts_at, ends_at, created_at, updated_at FROM entitlements WHERE subscription_id = $1
`

func (q *Queries) GetEntitlementsBySubscriptionID(ctx context.Context, subscriptionID pgtype.Int8) ([]Entitlement, error) {
	rows, err := q.db.Query(ctx, getEntitlementsBySubscriptionID, subscriptionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entitlement
	for rows.Next() {
		var i Entitlement
		if err := rows.Scan(
			&i.ID,
			&i.GuildID,
			&i.SubscriptionID,
			&i.Type,
			&i.PlanIds,
			&i.StartsAt,
			&i.EndsAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertSubscriptionEntitlement = `-- name: UpsertSubscriptionEntitlement :one
INSERT INTO entitlements (
    id,
    guild_id,
    subscription_id,
    type,
    plan_ids,
    starts_at,
    ends_at,
    created_at,
    updated_at
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9
) ON CONFLICT (guild_id, subscription_id) DO UPDATE SET
    type = EXCLUDED.type,
    plan_ids = EXCLUDED.plan_ids,
    starts_at = EXCLUDED.starts_at,
    ends_at = EXCLUDED.ends_at,
    updated_at = EXCLUDED.updated_at
RETURNING id, guild_id, subscription_id, type, plan_ids, starts_at, ends_at, created_at, updated_at
`

type UpsertSubscriptionEntitlementParams struct {
	ID             int64
	GuildID        int64
	SubscriptionID pgtype.Int8
	Type           string
	PlanIds        []string
	StartsAt       pgtype.Timestamp
	EndsAt         pgtype.Timestamp
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
}

func (q *Queries) UpsertSubscriptionEntitlement(ctx context.Context, arg UpsertSubscriptionEntitlementParams) (Entitlement, error) {
	row := q.db.QueryRow(ctx, upsertSubscriptionEntitlement,
		arg.ID,
		arg.GuildID,
		arg.SubscriptionID,
		arg.Type,
		arg.PlanIds,
		arg.StartsAt,
		arg.EndsAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Entitlement
	err := row.Scan(
		&i.ID,
		&i.GuildID,
		&i.SubscriptionID,
		&i.Type,
		&i.PlanIds,
		&i.StartsAt,
		&i.EndsAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
